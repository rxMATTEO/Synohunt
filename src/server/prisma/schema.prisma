generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Notification {
  id     Int    @id @default(autoincrement())
  typeId Int
  userId String

  User User             @relation(fields: [userId], references: [id])
  Type NotificationType @relation(fields: [id], references: [id])
}

model NotificationType {
  id           Int            @id @default(autoincrement())
  value        String
  Notification Notification[]
}

model Level {
  id       Int    @id @default(autoincrement())
  value    String
  groupdId Int

  Group Group  @relation(fields: [groupdId], references: [id])
  User  User[]
}

model Group {
  id         Int     @id @default(autoincrement())
  min        Int
  max        Int
  name       String
  multiplier Int     @default(10) // formula: multiplier * nextLevel
  Level      Level[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  levelId       Int?
  Level         Level?    @relation(fields: [levelId], references: [id])
  points        Int       @default(1)
  moneyId       Int?
  account        Account[]
  sessions       Session[]
  Notification   Notification[]
  CompletedTask  CompletedTask[]
  BookmarkedTask BookmarkedTask[]
  Message        Message[]
  Money          Money?  @relation(fields: [moneyId], references: [id])
}

model Money {
    id Int @id @default(autoincrement())
    value Int @default(1)
    User User[]
}

model Message {
  id       Int           @id @default(autoincrement())
  userId   String
  topic    String        @default("")
  value    String
  statusId Int
  Status   MessageStatus @relation(fields: [statusId], references: [id])
  User     User          @relation(fields: [userId], references: [id])
}

model MessageStatus {
  id      Int       @id @default(autoincrement())
  value   String
  Message Message[]
}

model CompletedTask {
  id     Int    @id @default(autoincrement())
  userId String
  taskId Int

  User User @relation(fields: [userId], references: [id])
  Task Task @relation(fields: [taskId], references: [id])
}

model BookmarkedTask {
  id     Int    @id @default(autoincrement())
  userId String
  taskId Int

  User User @relation(fields: [userId], references: [id])
  Task Task @relation(fields: [taskId], references: [id])
}

model Task {
  id             Int              @id @default(autoincrement())
  diffId         Int
  langId         Int
  description    String
  wordId         Int
  Word           Word             @relation(fields: [wordId], references: [id])
  Difficulity    Difficulity      @relation(fields: [diffId], references: [id])
  Language       Language         @relation(fields: [langId], references: [id])
  Tag            Tag[]
  CompletedTask  CompletedTask[]
  BookmarkedTask BookmarkedTask[]
}

model Difficulity {
  id   Int    @id @default(autoincrement())
  name String
  Task Task[]
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String
  taskId Int

  Task Task @relation(fields: [taskId], references: [id])
}

model Language {
  id        Int    @id @default(autoincrement())
  langShort String
  langFull  String
  Task      Task[]
}

model Word {
  id   Int    @id @default(autoincrement())
  word String

  Synonym Synonym[]
  Task    Task[]
}

model Synonym {
  id             Int    @id @default(autoincrement())
  wordId         Int
  value          String
  pointsForGuess Int    @default(5)
  Word           Word   @relation(references: [id], fields: [wordId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
